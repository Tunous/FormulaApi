{"interfaceLanguages":{"swift":[{"children":[{"title":"API","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/urlsession","title":"static var urlSession: URLSession","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/error\/external(statuscode:)","title":"case external(statusCode: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/f1\/error\/internal(statuscode:)","title":"case `internal`(statusCode: Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/formulaapi\/f1\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/f1\/error","title":"F1.Error","type":"enum"}],"path":"\/documentation\/formulaapi\/f1","title":"F1","type":"enum"},{"title":"Filtering","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/filtercriteria\/circuit(_:)","title":"case circuit(CircuitID)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/constructor(_:)","title":"case constructor(ConstructorID)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/constructorstanding(position:)","title":"case constructorStanding(position: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/driver(_:)","title":"case driver(DriverID)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/driverstanding(position:)","title":"case driverStanding(position: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/fastest(rank:)","title":"case fastest(rank: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/finishingresult(_:)","title":"case finishingResult(FinishingResult)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/grid(position:)","title":"case grid(position: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/filtercriteria\/status(_:)","title":"case status(String)","type":"case"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/filtercriteria\/finishingposition(_:)","title":"static func finishingPosition(Int) -> FilterCriteria","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/filtercriteria\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/filtercriteria\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/filtercriteria","title":"FilterCriteria","type":"enum"},{"children":[{"title":"Season filters","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/raceseason\/all","title":"case all","type":"case"},{"path":"\/documentation\/formulaapi\/raceseason\/current","title":"static let current: RaceSeason","type":"property"},{"path":"\/documentation\/formulaapi\/raceseason\/current(round:)","title":"case current(round: RaceRound)","type":"case"},{"path":"\/documentation\/formulaapi\/raceseason\/year(_:round:)","title":"case year(Int, round: RaceRound)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/raceseason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/raceseason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/raceseason","title":"RaceSeason","type":"enum"},{"children":[{"title":"Round filters","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/raceround\/all","title":"case all","type":"case"},{"path":"\/documentation\/formulaapi\/raceround\/last","title":"case last","type":"case"},{"path":"\/documentation\/formulaapi\/raceround\/next","title":"case next","type":"case"},{"path":"\/documentation\/formulaapi\/raceround\/number(_:)","title":"case number(Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/raceround\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/raceround\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/raceround\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/raceround\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/raceround","title":"RaceRound","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/finishingresult\/disqualified","title":"case disqualified","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/excluded","title":"case excluded","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/failedtoqualify","title":"case failedToQualify","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/finished(position:)","title":"case finished(position: Int)","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/notclassified","title":"case notClassified","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/retired","title":"case retired","type":"case"},{"path":"\/documentation\/formulaapi\/finishingresult\/withdrawn","title":"case withdrawn","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/finishingresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/finishingresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/finishingresult","title":"FinishingResult","type":"enum"},{"title":"Pagination","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/page\/init(limit:offset:)","title":"init(limit: Int, offset: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/page\/hasnextpage","title":"var hasNextPage: Bool","type":"property"},{"path":"\/documentation\/formulaapi\/page\/haspreviouspage","title":"var hasPreviousPage: Bool","type":"property"},{"path":"\/documentation\/formulaapi\/page\/limit","title":"let limit: Int","type":"property"},{"path":"\/documentation\/formulaapi\/page\/offset","title":"let offset: Int","type":"property"},{"path":"\/documentation\/formulaapi\/page\/total","title":"let total: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/page\/next()","title":"func next() -> Page","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/page\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/page\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/page","title":"Page","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/elements","title":"let elements: [Element]","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/page","title":"let page: Page","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/getnextpage()","title":"func getNextPage() async throws -> Paginable<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/contains(_:)-8cn71","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/makeiterator()","title":"func makeIterator() -> Array<Element>.Iterator","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/map(_:)-4gg4q","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/split(separator:maxsplits:omittingemptysubsequences:)-25n3y","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/split(separator:maxsplits:omittingemptysubsequences:)-51oc5","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"}],"path":"\/documentation\/formulaapi\/paginable\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/formulaapi\/paginable\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/paginable\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/contains(_:)-9bfe7","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/fill(using:)-2swlj","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/fill(using:)-5dzcb","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/fill(using:)-5x6jd","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/filter(_:)-70rgc","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/filter(_:)-rx1i","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/flatmap(_:)-263y7","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/flatmap(_:)-9at50","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/joined(separator:)-23x8t","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/joined(separator:)-8wfki","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/map(_:)-91zkz","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/sorted(using:)-6tl0g","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/sorted(using:)-81qk5","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/split(separator:maxsplits:omittingemptysubsequences:)-5f34l","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/formulaapi\/paginable\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/formulaapi\/paginable\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/paginable","title":"Paginable","type":"struct"},{"title":"Season list","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/seasons(season:by:page:)","title":"static func seasons(season: RaceSeason, by: [FilterCriteria], page: Page?) async throws -> Paginable<Season>","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/season\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/season\/season","title":"let season: String","type":"property"},{"path":"\/documentation\/formulaapi\/season\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/season\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/season\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/season","title":"Season","type":"struct"},{"title":"Race schedule","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/races(season:by:page:)","title":"static func races(season: RaceSeason, by: [FilterCriteria], page: Page?) async throws -> Paginable<Race>","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/race\/circuit","title":"let circuit: Circuit","type":"property"},{"path":"\/documentation\/formulaapi\/race\/date","title":"let date: Date","type":"property"},{"path":"\/documentation\/formulaapi\/race\/firstpractice","title":"let firstPractice: Date?","type":"property"},{"path":"\/documentation\/formulaapi\/race\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/formulaapi\/race\/qualifying","title":"let qualifying: Date?","type":"property"},{"path":"\/documentation\/formulaapi\/race\/round","title":"let round: String","type":"property"},{"path":"\/documentation\/formulaapi\/race\/season","title":"let season: String","type":"property"},{"path":"\/documentation\/formulaapi\/race\/secondpractice","title":"let secondPractice: Date?","type":"property"},{"path":"\/documentation\/formulaapi\/race\/sprint","title":"let sprint: Date?","type":"property"},{"path":"\/documentation\/formulaapi\/race\/thirdpractice","title":"let thirdPractice: Date?","type":"property"},{"path":"\/documentation\/formulaapi\/race\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/race\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/race\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/race\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/race\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/race","title":"Race","type":"struct"},{"title":"Circuits","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/circuits(season:by:page:)","title":"static func circuits(season: RaceSeason, by: [FilterCriteria], page: Page?) async throws -> Paginable<Circuit>","type":"method"},{"children":[{"title":"Custom circuit","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/formulaapi\/circuitid\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"},{"title":"Known circuits","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/monza","title":"static let monza: CircuitID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/circuitid\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/circuitid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/circuitid\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuitid\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/circuitid\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/circuitid","title":"CircuitID","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuit\/id","title":"let id: CircuitID","type":"property"},{"path":"\/documentation\/formulaapi\/circuit\/location","title":"let location: Location","type":"property"},{"path":"\/documentation\/formulaapi\/circuit\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/formulaapi\/circuit\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuit\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/circuit\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/circuit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/circuit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/circuit","title":"Circuit","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/location\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/location\/country","title":"let country: String","type":"property"},{"path":"\/documentation\/formulaapi\/location\/lat","title":"let lat: String","type":"property"},{"path":"\/documentation\/formulaapi\/location\/locality","title":"let locality: String","type":"property"},{"path":"\/documentation\/formulaapi\/location\/long","title":"let long: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/location\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/location\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/location","title":"Location","type":"struct"},{"title":"Drivers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/drivers(season:by:page:)","title":"static func drivers(season: RaceSeason, by: [FilterCriteria], page: Page?) async throws -> Paginable<Driver>","type":"method"},{"children":[{"title":"Custom drivers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/formulaapi\/driverid\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"},{"title":"Known drivers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/alonso","title":"static let alonso: DriverID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/driverid\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/driverid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/driverid\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driverid\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/driverid\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/driverid","title":"DriverID","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driver\/code","title":"let code: String","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/dateofbirth","title":"let dateOfBirth: Date","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/familyname","title":"let familyName: String","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/givenname","title":"let givenName: String","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/id","title":"let id: DriverID","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/nationality","title":"let nationality: String","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/permanentnumber","title":"let permanentNumber: Int?","type":"property"},{"path":"\/documentation\/formulaapi\/driver\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driver\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/driver\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/driver\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/driver\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/driver","title":"Driver","type":"struct"},{"title":"Constructors","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/f1\/constructors(season:by:page:)","title":"static func constructors(season: RaceSeason, by: [FilterCriteria], page: Page?) async throws -> Paginable<Constructor>","type":"method"},{"children":[{"title":"Custom constructor","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/formulaapi\/constructorid\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"},{"title":"Known constructors","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/ferrari","title":"static let ferrari: ConstructorID","type":"property"},{"path":"\/documentation\/formulaapi\/constructorid\/mclaren","title":"static let mcLaren: ConstructorID","type":"property"},{"path":"\/documentation\/formulaapi\/constructorid\/renault","title":"static let renault: ConstructorID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/constructorid\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/constructorid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/constructorid\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructorid\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/formulaapi\/constructorid\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/constructorid","title":"ConstructorID","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructor\/id","title":"let id: ConstructorID","type":"property"},{"path":"\/documentation\/formulaapi\/constructor\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/formulaapi\/constructor\/nationality","title":"let nationality: String","type":"property"},{"path":"\/documentation\/formulaapi\/constructor\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructor\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/formulaapi\/constructor\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/formulaapi\/constructor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/formulaapi\/constructor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/formulaapi\/constructor","title":"Constructor","type":"struct"}],"path":"\/documentation\/formulaapi","title":"FormulaApi","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}